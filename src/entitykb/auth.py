from pathlib import Path
from typing import Optional

from . import (
    StoredUser,
    User,
    UserStatus,
    create_index,
    exceptions,
    interfaces,
    security,
)


class Auth(interfaces.IAuth):
    """ Simple auth that doesn't allow for custom passwords. """

    def __init__(self, root: Path, secret_key: str):
        super().__init__(root)
        self.secret_key = secret_key
        self.cache = create_index(str(root / "users"), decoder=StoredUser)

    def authenticate(self, username: str, password: str) -> Optional[User]:
        """ Retrieve user, check password and return if password valid. """
        user: StoredUser = self.get_user(username)
        if user is not None:
            if security.verify_password(password, user.hashed_password):
                return User(**user.dict())

    def add_user(self, username: str, status: UserStatus) -> str:
        """ Create user if it doesn't exist with autogenerated password. """
        if not (isinstance(username, str) and len(username) > 0):
            raise exceptions.InvalidUsername()

        if username in self.cache:
            raise exceptions.DuplicateUsername()

        plain_password = security.generate_password()
        hashed_password = security.hash_password(plain_password)
        user = StoredUser(
            username=username,
            status=status,
            hashed_password=hashed_password,
        )
        self.cache[username] = user
        return plain_password

    def set_status(self, username: str, status: UserStatus) -> bool:
        """ Change user's status to new value. """
        user: StoredUser = self.get_user(username)
        success = False
        if user and user.status != status:
            user.status = status
            self.cache[username] = user
            success = True
        return success

    def reset_password(self, username: str) -> str:
        """ Resets a user's password and returns the plain-text password. """
        user: StoredUser = self.get_user(username)
        if user:
            plain_password = security.generate_password()
            user.hashed_password = security.hash_password(plain_password)
            self.cache[username] = user
            return plain_password

    def get_user(self, username: str) -> Optional[StoredUser]:
        """ Return full user account from username. """
        return self.cache.get(username)
