{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../Admin.svelte",
    "../../App.svelte",
    "../../AttributeFilter.svelte",
    "../../ColumnFilter.svelte",
    "../../DetailView.svelte",
    "../../ListView.svelte",
    "../../Menu.svelte",
    "../../Pagination.svelte"
  ],
  "sourcesContent": [
    "<script>\n    import {search} from './api.js';\n    import Pagination from \"./Pagination.svelte\";\n\n    export let selectKey = null;\n\n    let term = '';\n    let key = '';\n    let label = '';\n    let attr_name = '';\n    let attr_value = '';\n    let page = 0;\n    let showFilter = false;\n\n    let data = {\"nodes\": [], \"trails\": []};\n    const hide_attrs = [\"key\", \"label\", \"name\", \"synonyms\"];\n\n    const onChange = async () => {\n        page = 0;\n        data = await search(term, key, label, attr_name, attr_value, page);\n    };\n\n    const onChangePage = async () => {\n        data = await search(term, key, label, attr_name, attr_value, page);\n    };\n\n    const showFilters = () => {\n        showFilter = true;\n    };\n\n    const clearFilters = () => {\n        term = '';\n        key = '';\n        label = '';\n        attr_name = '';\n        attr_value = '';\n        page = 0;\n        showFilter = false;\n    };\n\n    const openRow = (key) => {\n        selectKey = key;\n    };\n\n    $: onChange(term);\n    $: onChange(key);\n    $: onChange(label);\n    $: onChange(attr_name);\n    $: onChange(attr_value);\n    $: onChangePage(page);\n</script>\n\n<div class=\"ui grid\">\n    <div class=\"eight wide column\">\n        {#if showFilter}\n        <button class=\"ui labeled icon red button\" on:click={clearFilters}>\n          <i class=\"minus circle icon\"></i>\n          Clear Filters\n        </button>\n        {:else}\n        <button class=\"ui labeled icon blue button\" on:click={showFilters}>\n            <i class=\"filter icon\"></i>\n            Show Filters\n        </button>\n        {/if}\n    </div>\n    <div class=\"eight wide column right aligned\">\n       <Pagination bind:page={page}/>\n    </div>\n</div>\n\n<table class=\"ui compact selectable celled striped table top aligned\">\n    <thead class=\"full-width\">\n    <tr>\n        <th class=\"two wide\">\n            Name (Synonyms)\n        </th>\n        <th class=\"two wide\">\n            Key\n        </th>\n        <th class=\"two wide\">\n            Label\n        </th>\n        <th class=\"four wide\">\n            Attributes\n        </th>\n    </tr>\n    {#if showFilter}\n    <tr class=\"center aligned\">\n        <th><input placeholder=\"prefix\" bind:value={term}></th>\n        <th><input placeholder=\"key\" bind:value={key}></th>\n        <th><input placeholder=\"label\" bind:value={label}></th>\n        <th nowrap=\"nowrap\">\n            <input placeholder=\"name\" bind:value={attr_name}>\n            &thickapprox;\n            <input placeholder=\"value\" bind:value={attr_value}>\n        </th>\n    </tr>\n    {/if}\n    </thead>\n    <tbody>\n    {#each data.nodes as node}\n        <tr on:click={openRow(node.key)}>\n            <td>\n                {node.name}\n                {#if node.synonyms}\n                    {#each node.synonyms as synonym}\n                        {synonym}\n                    {/each}\n                {/if}\n            </td>\n            <td>{node.key}</td>\n            <td>{node.label}</td>\n            <td>\n                <table class=\"ui compact celled table top aligned\">\n                    {#each Object.keys(node) as name}\n                        {#if (node[name] != null) && !hide_attrs.includes(name)}\n                            <tr class=\"top aligned\">\n                                <td class=\"four wide field_name\">{name}:</td>\n                                <td class=\"twelve wide\">{node[name]}</td>\n                            </tr>\n                        {/if}\n                    {/each}\n                </table>\n            </td>\n        </tr>\n    {/each}\n    </tbody>\n</table>\n\n<style>\n    .field_name {\n        font-weight: bold;\n        color: #444444;\n        background-color: #DDD5DD;\n    }\n</style>",
    "<script>\n    import Menu from \"./Menu.svelte\";\n    import Bottom from \"./Bottom.svelte\";\n    import ListView from \"./ListView.svelte\";\n    import DetailView from \"./DetailView.svelte\";\n\n    let choice = \"admin\";\n    let selectKey = null;\n\n    const updateKey = () => {\n        if (selectKey !== null) {\n            choice = \"detail\"\n        } else {\n            choice = \"admin\";\n        }\n    };\n\n    const updateChoice = () => {\n        if (choice !== \"detail\") {\n            selectKey = null;\n        }\n    };\n\n    $: updateKey(selectKey);\n    $: updateChoice(choice);\n</script>\n\n<main>\n    <Menu bind:choice={choice} />\n\n    {#if (choice === \"admin\")}\n    <div id=\"content\">\n        <ListView bind:selectKey={selectKey} />\n    </div>\n    {:else if (choice === \"detail\")}\n    <div id=\"content\">\n        <DetailView key={selectKey} />\n    </div>\n    {:else if (choice === \"api\")}\n        <iframe src=\"/docs\"></iframe>\n    {:else if (choice === \"docs\")}\n        <iframe src=\"https://www.entitykb.org/\"></iframe>\n    {:else if (choice === \"docs\")}\n        <iframe src=\"https://www.entitykb.org/\"></iframe>\n    {/if}\n\n    <Bottom />\n</main>\n\n<style>\n    iframe {\n        width: 100%;\n        height: calc(85vh);\n        border: 0;\n    }\n    #content {\n        padding: 1em;\n        margin: 1em 3em 5em 3em;\n    }\n</style>",
    "<script>\n    import {createEventDispatcher} from 'svelte';\n    const dispatch = createEventDispatcher();\n\n    let name = \"\";\n    let value = \"\";\n    let inFilterMode = false;\n\n    const cancelFilter = () => {\n        inFilterMode = false;\n        name = \"\";\n        value = \"\";\n    };\n\n    const openFilter = () => {\n        inFilterMode = true;\n    };\n\n    const updateFilterValue = () => {\n        dispatch(\"update\", {\"name\": name, \"value\": value});\n    };\n\n    $: updateFilterValue(name);\n    $: updateFilterValue(value);\n</script>\n\n<div id=\"column\">\n    {#if inFilterMode}\n        <a on:click={cancelFilter}><i class=\"red window close icon\"></i></a>\n        &nbsp;\n        <input placeholder=\"name\" bind:value={name} autofocus>\n        &thickapprox;\n        <input placeholder=\"value\" bind:value={value}>\n    {:else}\n        <a on:click={openFilter}><i class=\"blue filter icon\"></i></a>\n        &nbsp;\n        Attributes\n    {/if}\n</div>\n\n<style>\n    #column {\n        vertical-align: middle;\n        height: 1.5em;\n    }\n\n    .icon {\n        width: 1em;\n    }\n</style>\n\n",
    "<script>\n    import {createEventDispatcher} from 'svelte';\n    const dispatch = createEventDispatcher();\n\n    export let name;\n    export let display;\n\n    let filterValue;\n    let inFilterMode = false;\n\n    const cancelFilter = () => {\n        inFilterMode = false;\n        filterValue = \"\";\n    };\n\n    const openFilter = () => {\n        inFilterMode = true;\n    };\n\n    const updateFilterValue = () => {\n        dispatch(\"update\", {\"name\": name, \"value\": filterValue});\n    };\n\n    $: updateFilterValue(filterValue);\n</script>\n\n<div id=\"column\">\n    {#if inFilterMode}\n        <a on:click={cancelFilter}><i class=\"red window close icon\"></i></a>\n        &nbsp;\n        <input placeholder=\"{display}\" bind:value={filterValue} autofocus>\n    {:else}\n        <a on:click={openFilter}><i class=\"blue filter icon\"></i></a>\n        &nbsp;\n        {display}\n    {/if}\n</div>\n\n<style>\n    #column {\n        vertical-align: middle;\n        height: 1.5em;\n    }\n\n    .icon {\n        width: 1em;\n    }\n</style>\n\n",
    "<script>\n    import {getNode, getNeighbors} from './api.js';\n\n    export let key = null;\n\n    let node = {};\n    let neighbors = [];\n    let page = 0;\n    let edges = new Map();\n\n    function addTrail(trail) {\n        let items = edges.get(trail.end);\n        if (!items) {\n            items = [];\n            edges.set(trail.end, items);\n        }\n\n        function addEdge(edge) {\n            let direction = edge.end === trail.end ? \">>>\" : \"<<<\";\n            items.push({verb: edge.verb, direction: direction});\n        }\n\n        trail && trail.hops && trail.hops[0].edges.forEach(addEdge);\n    }\n\n    const onChange = async () => {\n        node = await getNode(key);\n        let result = await getNeighbors(key, page);\n\n        neighbors = (result && result.nodes) || [];\n        edges = new Map();\n        let trails = (result && result.trails) || [];\n        trails.forEach(addTrail);\n    };\n\n    const isAttribute = (fieldName) => {\n        return ![\"key\", \"name\", \"label\"].includes(fieldName);\n    };\n\n    const openRow = (rowKey) => {\n        key = rowKey;\n    };\n\n    $: onChange(key);\n</script>\n\n<div class=\"ui grid\">\n    <div class=\"eight wide column\">\n        <h3>Node Details</h3>\n        <table class=\"ui compact definition table\">\n            <tbody>\n            <tr>\n                <td>key</td>\n                <td>{node['key']}</td>\n            </tr>\n            <tr>\n                <td>name</td>\n                <td>{node['name']}</td>\n            </tr>\n            <tr>\n                <td>label</td>\n                <td>{node['label']}</td>\n            </tr>\n            {#each Object.keys(node) as fieldName}\n                {#if isAttribute(fieldName) && Boolean(node[fieldName])}\n                    <tr>\n                        <td>{fieldName}</td>\n                        <td>{node[fieldName]}</td>\n                    </tr>\n                {/if}\n            {/each}\n            </tbody>\n        </table>\n    </div>\n    <div class=\"eight wide column\">\n        <h3>Neighbors</h3>\n        <table class=\"ui compact striped celled table\">\n            <thead class=\"full-width\">\n            <tr>\n                <th class=\"two wide\">Edges</th>\n                <th class=\"two wide\">Key</th>\n                <th class=\"two wide\">Label</th>\n                <th class=\"four wide\">Name</th>\n            </tr>\n            </thead>\n            <tbody>\n            {#each neighbors as neighbor}\n                <tr on:click={openRow(neighbor.key)}>\n                    <td>\n                        <ul class=\"edges\">\n                            {#each edges.get(neighbor.key) as edge}\n                                <li class=\"edge\">\n                                    {edge.verb} <b>{edge.direction}</b>\n                                </li>\n                            {/each}\n                        </ul>\n                    </td>\n                    <td>{neighbor.key}</td>\n                    <td>{neighbor.label}</td>\n                    <td>{neighbor.name}</td>\n                </tr>\n            {/each}\n            </tbody>\n        </table>\n    </div>\n</div>\n\n<style>\n    ul.edges {\n        list-style-type: none;\n        margin: 0;\n        padding: 0;\n    }\n</style>\n",
    "<script>\n    import {search} from './api.js';\n    import Pagination from \"./Pagination.svelte\";\n    import ColumnFilter from \"./ColumnFilter.svelte\";\n    import AttributeFilter from \"./AttributeFilter.svelte\";\n\n    export let selectKey = null;\n    let filters = {\n        \"name\": '',\n        \"key\": '',\n        \"label\": '',\n    };\n\n    let page = 0;\n    let data = {\"nodes\": [], \"trails\": []};\n\n    const isAttribute = (fieldName) => {\n        return ![\"key\", \"name\", \"label\"].includes(fieldName);\n    };\n\n    const onUpdate = async (event) => {\n        if (isAttribute(event.detail.name)) {\n            filters = {\n                \"name\": filters[\"name\"],\n                \"key\": filters[\"key\"],\n                \"label\": filters[\"label\"],\n            };\n\n            if (event.detail.name && event.detail.value) {\n                filters[event.detail.name] = event.detail.value;\n            }\n\n        } else {\n            filters[event.detail.name] = event.detail.value;\n        }\n\n        page = 0;\n    };\n\n    const onRefresh = async () => {\n        console.log(page);\n        console.log(filters);\n\n        data = await search(page, filters);\n        console.log(data);\n    };\n\n    const openRow = (key) => {\n        selectKey = key;\n    };\n\n    const iterateAttrs = (node) => {\n        let attrs = [];\n        const names = Object.keys(node);\n\n        for (let index = 0; index < names.length; ++index) {\n            let name = names[index];\n            if (!isAttribute(name)) continue;\n\n            let value = node[name];\n\n            if (!Boolean(value)) continue;\n            if (value instanceof Array && value.length === 0) continue;\n\n            attrs.push([name, value]);\n        }\n\n        return attrs;\n    };\n\n    $: onRefresh(page, filters);\n</script>\n\n<div class=\"ui grid\">\n    <div class=\"eight wide column\">\n    </div>\n    <div class=\"eight wide column right aligned\">\n        <Pagination bind:page={page}/>\n    </div>\n</div>\n\n<table class=\"ui compact selectable celled striped table top aligned\">\n    <thead class=\"full-width\">\n    <tr>\n        <th class=\"two wide\">\n            <ColumnFilter name=\"name\" display=\"Name\" on:update={onUpdate} />\n        </th>\n        <th class=\"two wide\">\n            <ColumnFilter name=\"key\" display=\"Key\" on:update={onUpdate} />\n        </th>\n        <th class=\"two wide\">\n            <ColumnFilter name=\"label\" display=\"Label\" on:update={onUpdate} />\n        </th>\n        <th class=\"four wide\">\n            <AttributeFilter on:update={onUpdate} />\n        </th>\n    </tr>\n    </thead>\n    <tbody>\n    {#each data.nodes as node}\n        <tr on:click={openRow(node.key)}>\n            <td>{node.name}</td>\n            <td>{node.key}</td>\n            <td>{node.label}</td>\n            <td>\n                <table class=\"ui compact celled table top aligned\">\n                    {#each iterateAttrs(node) as kv}\n                        <tr class=\"top aligned\">\n                            <td class=\"four wide field_name\">{kv[0]}:</td>\n                            <td class=\"twelve wide\">{kv[1]}</td>\n                        </tr>\n                    {/each}\n                </table>\n            </td>\n        </tr>\n    {/each}\n    </tbody>\n</table>\n\n<style>\n    .field_name {\n        font-weight: bold;\n        color: #444444;\n        background-color: #DDD5DD;\n    }\n</style>",
    "<script>\n    export let choice = \"admin\";\n\n    function setChoice(e) {\n        window.$(\".menu .active\").removeClass(\"active\");\n        choice = e.target.id;\n    }\n\n    $: window.$(\"#\" + choice).addClass(\"active\");\n\n</script>\n\n<div class=\"ui top menu\">\n  <div class=\"item\">\n      <i class=\"large lightbulb outline icon\"></i>\n  </div>\n  <a id=\"admin\" class=\"active item\" on:click={setChoice}>Admin</a>\n  <a id=\"api\" class=\"item\" on:click={setChoice}>API</a>\n  <a id=\"docs\" class=\"item\" on:click={setChoice}>Docs</a>\n</div>\n\n<style>\ndiv.top.menu {\n    border: 0;\n    font-size: 1.4em;\n}\n</style>",
    "<script>\n    export let page = 0;\n    let items = [];\n    let addedNull = false;\n\n    function onClick(evt) {\n        page = parseInt(evt.target.attributes['data-value'].value);\n    }\n\n    function changePage() {\n        items = [];\n        let addedNull = false;\n        for (let i=0; i <= page; i++) {\n            if (i < 4) {\n                items.push(i);\n            } else if ((page - i) < 4) {\n                items.push(i);\n            } else if (!addedNull) {\n                addedNull = true;\n                items.push(null);\n            }\n        }\n        items.push(page + 1);\n\n        while (items.length < 10) {\n            items.push(null);\n        }\n\n    }\n\n    $: changePage(page);\n</script>\n\n<b>Page:</b>\n\n<div class=\"ui pagination tiny menu\">\n    {#each items as item}\n        {#if item === null}\n            <a class=\"disabled item\">...</a>\n        {:else}\n        <a class=\"item\"\n           data-value={item}\n           class:active={item === page}\n           on:click={onClick}>\n            {item + 1}\n        </a>\n        {/if}\n    {/each}\n</div>\n\n<style>\n    .menu .item {\n        width: 2em;\n    }\n</style>"
  ],
  "names": [],
  "mappings": "AAmII,WAAW,eAAC,CAAC,AACT,WAAW,CAAE,IAAI,CACjB,KAAK,CAAE,OAAO,CACd,gBAAgB,CAAE,OAAO,AAC7B,CAAC;ACrFD,MAAM,cAAC,CAAC,AACJ,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,KAAK,IAAI,CAAC,CAClB,MAAM,CAAE,CAAC,AACb,CAAC,AACD,QAAQ,cAAC,CAAC,AACN,OAAO,CAAE,GAAG,CACZ,MAAM,CAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,AAC3B,CAAC;ACjBD,OAAO,eAAC,CAAC,AACL,cAAc,CAAE,MAAM,CACtB,MAAM,CAAE,KAAK,AACjB,CAAC,AAED,KAAK,eAAC,CAAC,AACH,KAAK,CAAE,GAAG,AACd,CAAC;ACTD,OAAO,eAAC,CAAC,AACL,cAAc,CAAE,MAAM,CACtB,MAAM,CAAE,KAAK,AACjB,CAAC,AAED,KAAK,eAAC,CAAC,AACH,KAAK,CAAE,GAAG,AACd,CAAC;AC8DD,EAAE,MAAM,eAAC,CAAC,AACN,eAAe,CAAE,IAAI,CACrB,MAAM,CAAE,CAAC,CACT,OAAO,CAAE,CAAC,AACd,CAAC;ACQD,WAAW,eAAC,CAAC,AACT,WAAW,CAAE,IAAI,CACjB,KAAK,CAAE,OAAO,CACd,gBAAgB,CAAE,OAAO,AAC7B,CAAC;ACtGL,GAAG,IAAI,KAAK,eAAC,CAAC,AACV,MAAM,CAAE,CAAC,CACT,SAAS,CAAE,KAAK,AACpB,CAAC;AC0BG,mBAAK,CAAC,KAAK,cAAC,CAAC,AACT,KAAK,CAAE,GAAG,AACd,CAAC"
}